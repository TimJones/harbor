#!/bin/bash

# Copyright 2016 Port Direct
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
echo "${OS_DISTRO}: Kubelet Starting"
################################################################################
cfg_node=/etc/harbor/node.conf
cfg_network=/etc/harbor/network.conf
. /usr/sbin/container-gen-env
. /etc/os-container.env
export OS_DOMAIN=$(crudini --get $cfg_network DEFAULT os_domain)
export NODE_ROLE=$(crudini --get $cfg_node DEFAULT role)
. /opt/harbor/service-hosts.sh
. /opt/harbor/harbor-common.sh

export KUBE_STATUS_DIR="/run/harbor"
export KUBE_STATUS_FILE="${KUBE_STATUS_DIR}/kube-status"


echo "${OS_DISTRO}: Ensuring Required Assets Exist"
################################################################################
mkdir -p /var/run/harbor
mkdir -p /var/run/swarm
touch /var/run/swarm/docker.sock
mkdir -p ${KUBE_STATUS_DIR}
touch ${KUBE_STATUS_FILE}
rm -rf /var/run/harbor/hosts
touch /var/run/harbor/hosts


echo "${OS_DISTRO}: Determining node status"
################################################################################
KUBE_STATUS="$(cat ${KUBE_STATUS_FILE})"
if [ -z "$KUBE_STATUS" ]; then
    echo "${OS_DISTRO}: No status found, launching as bootrapper"
    export KUBE_STATUS="BOOTSTRAPPING"
    echo "${OS_DISTRO}: Kubelet Bootstrap Starting"
    ################################################################################
    if [ "$NODE_ROLE" = "master" ]; then
      echo "${OS_DISTRO}: Running Passwd Gen Script to convert templated values"
      ##############################################################################
      /usr/bin/harbor-passwd-gen
    fi
    echo "$KUBE_STATUS" > ${KUBE_STATUS_FILE}
elif [ "$KUBE_STATUS" = "BOOTSTRAPPING" ]; then
    echo "${OS_DISTRO}: This node is currently bootstrapping"
    export KUBE_STATUS="BOOTSTRAPPING"
elif [ "$KUBE_STATUS" = "BOOTSTRAPPED" ]; then
    echo "${OS_DISTRO}: This node has been boostrapped, just prepping manifests"
    export KUBE_STATUS="INITALIZING"
fi;


echo "${OS_DISTRO}: Generating Node Config Files"
################################################################################
/usr/bin/harbor-generate-cfgs


echo "${OS_DISTRO}: Generating Services Manifests"
################################################################################
source /usr/bin/harbor-prep-node-manifests


echo "${OS_DISTRO}: Prepping Kubelet start command and env"
################################################################################
export NODE_HOSTNAME="$(hostname -s).${OS_DOMAIN}"
export KUBERNETES_API_SERVER="http://${KUBERNETES_SERVICE_HOST}:8080"
echo "${OS_DISTRO}: Kubernetes Api Server: ${KUBERNETES_API_SERVER}"
check_required_vars NODE_HOSTNAME \
                    KUBERNETES_API_SERVER \
                    NETWORK_KUBE_SERVICE_IPS_SERVICE_IP_DNS_FREEIPA \
                    OS_DOMAIN \
                    NODE_ROLE \
                    KUBE_STATUS_FILE \
                    NODE_NETWORK_DEFAULT_IP



echo "${OS_DISTRO}: Dropping shell and launching Kubelet"
################################################################################
exec kubelet  --hostname-override=${NODE_HOSTNAME} \
              --allow-privileged=true \
              --sync-frequency=30s \
              --api-servers=${KUBERNETES_API_SERVER} \
              --v=1 \
              --docker-only \
              --event-burst=100 \
              --event-qps=20 \
              --kube-api-qps=50 \
              --kube-api-burst=100 \
              --node-status-update-frequency=5s \
              --node-ip=${NODE_NETWORK_DEFAULT_IP} \
              --address=${NODE_NETWORK_DEFAULT_IP} \
              --enable-server \
              --containerized=true \
              --cluster-dns=${NETWORK_KUBE_SERVICE_IPS_SERVICE_IP_DNS_FREEIPA} \
              --cluster-domain=${OS_DOMAIN} \
              --network-plugin=cni \
              --config=/etc/kubernetes/manifests \
              --node-labels=harbor-role=$NODE_ROLE \
              --pod-infra-container-image=docker.io/port/pause:latest
