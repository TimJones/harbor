#!/bin/bash

# Copyright 2016 Port Direct
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Notes:
#  - Please install the "jq" & "kubelet" packages before using this driver.
#  - Docker must be running with support for shared mounts,
#    this diver is only tested with docker>=v1.12.
#  - This driver requires that a config file be present at
#    /etc/harbor/auth-cinder.env, with keystone credentials
#    for accessing cinder

################################################################################
cfg_network=/etc/harbor/network.conf
export OS_DOMAIN=$(crudini --get $cfg_network DEFAULT os_domain)
source /etc/os-container.env
. /opt/harbor/service-hosts.sh
. /opt/harbor/harbor-common.sh
. /opt/harbor/kube/vars.sh


################################################################################
check_required_vars OS_DOMAIN \
                    FLEXVOLUME_IMAGE \
                    AUTH_FLEXVOLUME_KEYSTONE_REGION \
                    AUTH_FLEXVOLUME_KEYSTONE_PROJECT \
                    AUTH_FLEXVOLUME_KEYSTONE_PROJECT_DOMAIN \
                    AUTH_FLEXVOLUME_KEYSTONE_DOMAIN \
                    KEYSTONE_API_SERVICE_HOST_SVC


# VOLUMENAME=testing2e5
# SIZE=1
# MNTPATH=/var/lib/kubelet/pods/fdd9379a-7dc9-11e6-883e-10feed08255a/volumes/cinder/${VOLUMENAME}
# FSTYPE=xfs

################################################################################
usage() {
  err "Invalid usage. Usage: "
  err "\t$0 init"
  err "\t$0 attach <json params>"
  err "\t$0 detach <mount device>"
  err "\t$0 mount <mount dir> <mount device> <json params>"
  err "\t$0 unmount <mount dir>"
  exit 1
}

err() {
  echo -ne $* 1>&2
}

log() {
  echo -ne $* >&1
}

client_container () {

  ################################################################################
  AUTH_FLEXVOLUME_KEYSTONE_USER=$(kubectl \
    --namespace ${AUTH_FLEXVOLUME_KEYSTONE_NAMESPACE} \
    get secrets ${AUTH_FLEXVOLUME_KEYSTONE_SECRET} --output=json | \
    jq -r '.data ."kuryr-keystone-user"' | base64 --decode | cut -f 1 -d '=' --complement)
  AUTH_FLEXVOLUME_KEYSTONE_PASSWORD=$(kubectl \
    --namespace ${AUTH_FLEXVOLUME_KEYSTONE_NAMESPACE} \
    get secrets ${AUTH_FLEXVOLUME_KEYSTONE_SECRET} --output=json | \
    jq -r '.data ."kuryr-keystone-password"' | base64 --decode | cut -f 1 -d '=' --complement)

  docker run -i --rm \
    --net=host \
    --privileged \
    -e OS_AUTH_URL="https://${KEYSTONE_API_SERVICE_HOST_SVC}/v3" \
    -e OS_CACERT="/rootfs/var/lib/harbor/kube/ca.crt" \
    -e OS_IDENTITY_API_VERSION="3" \
    -e OS_REGION_NAME="${AUTH_FLEXVOLUME_KEYSTONE_REGION}" \
    -e OS_PROJECT_NAME="${AUTH_FLEXVOLUME_KEYSTONE_PROJECT}" \
    -e OS_PROJECT_DOMAIN_NAME="${AUTH_FLEXVOLUME_KEYSTONE_PROJECT_DOMAIN}" \
    -e OS_USER_DOMAIN_NAME="${AUTH_FLEXVOLUME_KEYSTONE_DOMAIN}" \
    -e OS_USERNAME="${AUTH_FLEXVOLUME_KEYSTONE_USER}" \
    -e OS_PASSWORD="${AUTH_FLEXVOLUME_KEYSTONE_PASSWORD}" \
    -v /:/rootfs:rshared \
    -v /dev:/dev:rshared \
    ${FLEXVOLUME_IMAGE} "${@}" 2> /dev/null
}



attach() {
  VOLUMENAME=$(echo $1 | jq -r '.volumeName')
  SIZE=$(echo $1 | jq -r '.size')

  CINDER_ATTACH="$( client_container kube-cinder-attach ${VOLUMENAME} ${SIZE} | sed 's/\r$//')"
  ATTACH_STATUS="$(echo $CINDER_ATTACH | awk '{ print $1}')"
  ATTACHED_DEV="$(echo $CINDER_ATTACH | awk '{ print $2}' )"

  if [ "${ATTACH_STATUS}" == "ACTIVE" ]; then
    log "{\"status\": \"Success\", \"device\":\"${ATTACHED_DEV}\"}"
    exit 0
  else
    err "{\"status\": \"Failure\", \"message\": \"Volume ${VOLUMENAME} could not be attached to the node\"}"
    exit 1
  fi

}


detach() {
  ATTACHED_DEV=$1
  CINDER_DETACH=$(client_container kube-cinder-detach ${ATTACHED_DEV})
  DETACH_STATUS="$(echo $CINDER_DETACH | awk '{ print $1}')"
  DETACH_MESSAGE="$(echo $CINDER_DETACH | cut -f 1 -d ' ' --complement)"

  if [ "${DETACH_STATUS}" == "SUCCESS" ]; then
    log "{\"status\": \"Success\", \"message\":\"Volume detach ${DETACH_MESSAGE}\"}"
    exit 0
  else
    err "{\"status\": \"Failure\", \"message\": \"Volume detach ${DETACH_MESSAGEe\"}"
    exit 1
  fi
}


domount() {
  MNTPATH=$1
  ATTACHED_DEV=$2
  FSTYPE=$(echo $3|jq -r '.["kubernetes.io/fsType"]')

  CINDER_MOUNT="$( client_container kube-cinder-mount $MNTPATH $ATTACHED_DEV $FSTYPE)"
  MOUNT_STATUS="$(echo $CINDER_MOUNT | awk '{ print $1}')"
  MOUNT_MESSAGE="$(echo $CINDER_MOUNT | cut -f 1 -d ' ' --complement)"

  if [ "${MOUNT_STATUS}" == "ACTIVE" ]; then
    log "{\"status\": \"Success\"}"
    exit 0
  else
    err "{\"status\": \"Failure\", \"message\": \"Mounting failed, ${MOUNT_MESSAGE}\"}"
    exit 1
  fi
}


unmount() {
  MNTPATH=$1

  CINDER_UMOUNT="$( client_container kube-cinder-umount ${MNTPATH})"

  if [ "${CINDER_UMOUNT}" == "SUCCESS" ]; then
    log "{\"status\": \"Success\"}"
    exit 0
  else
    log "{\"status\": \"Failure\", \"message\": \"Unounting failed ${MNTPATH}\"}"
    exit 1
  fi
}


op=$1

if [ "$op" = "init" ]; then
  docker pull ${CINDER_MOUNT_IMAGE} &> /dev/null
  log "{\"status\": \"Success\"}"
  exit 0
fi

if [ $# -lt 2 ]; then
  usage
fi

shift

case "$op" in
  attach)
    attach $*
    ;;
  detach)
    detach $*
    ;;
  mount)
    domount $*
    ;;
  unmount)
    unmount $*
    ;;
  *)
    usage
esac


exit 1
